{
  "0": {
    "id": "0",
    "title": "",
    "content": "  404  Page not found :(  The requested page could not be found.",
    "url": "https://v0-3-dev.vasern.com/404.html",
    "relUrl": "/404.html"
  },
  "1": {
    "id": "1",
    "title": "API References",
    "content": "",
    "url": "https://v0-3-dev.vasern.com/api.html",
    "relUrl": "/api.html"
  },
  "2": {
    "id": "2",
    "title": "Write and Read Records",
    "content": "CRUD shorts for create (insert), read (get), update, delete (remove) - basic database operations.The following contents will explain how to use CRUD on Vasern.Note: Use perform for multiple operationsLet’s use VasernDB in Todo use case example created in Write Schema, Setup Vasern.const { Todos } = VasernDB;Insert methodInserting new records into DocumentTodos.insert(newRecords, save = true)Arguments                              **_newRecord (Object          Array&amp;lt;Object&amp;gt;)_**: new record/records data                      save (boolean): allow Document to write record to disk right away. If set to false, Document won’t write record to disk right away and add to commited transaction list.Return  Array&amp;lt;Object&amp;gt;: a list of created records (indicate executing insert process)Examplevar item1 = Todos.insert({    name: &quot;Setup database for React Native&quot;,    note: &quot;Using Vasern&quot;,    completed: false})[0];Get methodDocument use Queryable object to work with records. Which use lodash to provide other queries such as include, find, filter, exclude, etc.Todos.get(lookupQuery)Arguments  lookupQuery ( string, Object )          (string): match record id with string value      (Object): match record properties and values with Object properties and values      Return  Object: object that match with lookupQuery  undefined if not foundExamplevar todoItem = Todos.get({ name: &quot;Setup database for React Native&quot; });Update methodUpdate existing record with new valuseTodos.update(lookupQuery, newValues, save = true);Arguments                              **_lookupQuery ( string          Object )_**                            (string): record id      (Object): record object that contains id        save (boolean): allow Document to write record to disk right away. If set to false, Document won’t write record to disk right away and add to commited transaction list.Return  Object: indicates record is found, and execute update process  false if item not foundExamplevar item1 = Todos.get({ name: &quot;Setup database for React Native&quot; });Todos.update(item1.id, { completed: true });Remove methodRemove an existing record from Document’s recordsTodos.remove(lookupQuery, save = true);Arguments                              **_lookupQuery ( string          Object )_**                            (string): record id      (Object): record object that contains id        save (boolean): allow Document to write record to disk right away. If set to false, Document won’t write record to disk right away and add to commited transaction list.Return  boolean: indicate record is found, and execute remove processExamplevar item1 = Todos.get({ name: &quot;Setup database for React Native&quot; });Todos.remove(item1);Perform multiple operationsThis method commits multiple operations and write all at once. Which optimize for performance.Note: Don’t use Todos.insert, Todos.remove or Todos.update in callback block as it willcreate a separate write process.function callback(db: { insert, update, remove, get }) {    // Execute operations}Todos.perform(callback);Arguments  callback ( Function ): ({ insert, update, remove, get }): execution callback block.          insert is a version of Insert method with save = false      get is a version of Get method      remove is a version of Remove method with save = false      update is a version of Update method with save = false      Return  No returning valueExampleTodos.perform(function(db) {    // Remove all completed items     // and update incompleted item to completed    Todos.data().forEach(function(item) {        if (item.completed) {            db.remove(item)        } else {            db.update(item, { completed: true })        }    })})What’s next?Learn about Queries or see examples",
    "url": "https://v0-3-dev.vasern.com/basic-crud-operation",
    "relUrl": "/basic-crud-operation"
  },
  "3": {
    "id": "3",
    "title": "Blog",
    "content": "Hi thre",
    "url": "https://v0-3-dev.vasern.com/blog.html",
    "relUrl": "/blog.html"
  },
  "4": {
    "id": "4",
    "title": "Data Types",
    "content": "There are basic data types used to define record values and Vasern’s defined data types.Basic data types      boolean is either true or false        number is any negative, positive, decimal numbers: 100, -9, 3.14 (similar to JavaScript number).Infinity and NaN are not supported.        string is any valid string, UTF8 supported languages: hello world, xin chào        object is standard key-value pairs. Object values can contains any basic data types  {     name: &quot;Bryan Griffin&quot;,    friends: [&quot;Stewie&quot;, &quot;Peter&quot;],     address: { unit: 2, city: &quot;Rhode Island&quot; }}  list is like an array, contains a list of mixed type values.[    &quot;Megatron Griffin&quot;,    { name: &quot;Stewie&quot;, relate: &quot;Younger brother&quot; },    false,    [1, 4, 5]]When writing schema, a ref data type is provided, which is an id of a referencerecord from the same or difference collection.Learn about data types in API ReferencesVasern’s defined typesBesides basic data types, you will also see other data types which can be a class or an extended object, used when dealing with query, or return a result.ResultInterfaceResultInterface is a data type returned after a query, or any of the CRUD operations.Its structure contains the following properties:  status indicate the result of the execution. It can be either ok, warning, error. For proxy, value can also be inserting, deleting, updating.  statusMessage is the message that describe the issue when status is either warning or error  items is a list of records, returned after using filter, or get method  changes indicate what changes have been made after the query execution, which includesdeleted records, updated records, new records inserted. When an error or conflic occurs causetermination, a number of unchange records will also be displayed.  total is a number returned after using count methodAn example of a ResultInterface structure:{    status: &quot;ok&quot;,    items: [{ ... }, { ... }],    changes: {        inserted: number,        deleted: number,        updated: number,        unchange: number    }}What next? Learn how to write schema and create Vasern instance",
    "url": "https://v0-3-dev.vasern.com/docs/database-and-collection/data-types.html",
    "relUrl": "/docs/database-and-collection/data-types.html"
  },
  "5": {
    "id": "5",
    "title": "Database and Collection",
    "content": "",
    "url": "https://v0-3-dev.vasern.com/docs/database-and-collection/database-and-collection.html",
    "relUrl": "/docs/database-and-collection/database-and-collection.html"
  },
  "6": {
    "id": "6",
    "title": "Data Model",
    "content": "Schemas are required to help Documents define its properties data type and validate records.The following information will help you to start writing schema for Documents,and create Vasern instance.Writing schemaThere are a short version and a detailed version of writing a database schema.Use the detailed version when you need to add custom methods into your collection.Let first see examples of schema in short version and detailed version. Then getmore in-depth information about the schema.Short versionimport { types } from 'vasern';var UserSchema = {    name: &quot;Todos&quot;,    validation: &quot;strict&quot;,    keys: {        firstName: types.string(55),        lastName: types.string(55),    }};Detailed versionimport { types } from 'vasern';class UserModel {    name = &quot;Users&quot;    keys = {        firstName: types.string(55),        lastName: types.string(55),    }        // Return all users with lastName = 'Griffin'    getAllGriffin() : Promise {        return this.filter({ lastName: &quot;Griffin&quot; }).asPromise()    }}Schema explainEach schema will have:  name is the collection name  keys describes collection keys (as property name and type)  validation is how records will be validated (none | easy | strict). By default, it is set to none.Schema keysDescribe how keys (or indexes) properties. These keys will be loaded and save a copyinto memory for fast query.Schema validationWhen inserting data into collection, Vasern can help you validate propertiesby setting validation with one of the following options:  none will not validate data, used by default.  easy will validate provided keys and its types  strict will throw error if property which was not mention in schema is providedInitiate a database instanceTo initiate a Vasern database instance, pass a list of schema into Vasern constructor.const VasernDB = new Vasern({ schema: [UserModel] })You can now using VasernDB to work with collection and data.What’s next? Learn about basic CRUD operations or see examples",
    "url": "https://v0-3-dev.vasern.com/docs/database-and-collection/database-model.html",
    "relUrl": "/docs/database-and-collection/database-model.html"
  },
  "7": {
    "id": "7",
    "title": "Event Listeners",
    "content": "Event listeners are callback functions that subscribe to a Document’s event(including loaded, insert, update, delete). Each time an event happen,it will automatically execute callback functions that was subsribed to that eventThe following content are event listeners that available to Vasern.  onAvailable  onLoaded  onInsert  onUpdate  onRemove  onChangeonAvailable eventonAvailable is triggered when the app started, and raw records is loaded from Vasern’s native module.Note: raw records are in the raw form, which has id and raw properties. Use onLoaded if you need normal recordsDocument.onAvailable(callback)Arguments  callback ( Function ): callback function when data is available in raw formExample// Assuming Todos is a Document instanceTodos.onAvailable(() =&amp;gt; {        // Notify user number of records    alert(`Loading ${Todos.count()} items`)})onLoaded eventonLoaded is triggered when raw records are converted to normal record objects.Document.onLoaded(callback)Arguments  callback ( Function ): callback function when data is loaded completelyExample// Assuming Todos is a Document instanceTodos.onLoaded(() =&amp;gt; {        // Display incompleted items to users    this.setState({         items: Todos.filter({ completed: false }).data(),    });})onInsert eventonInsert is triggered after a record or muliple records are inserted and saved to the Document.Callback function will receive a list of new records.Document.onLoaded(callback)Arguments  callback ( Function: { changed } ): callback function when records are inserted          changed ( Array[object] ): a list of records has just inserted      Example// Assuming Todos is a Document instanceTodos.onInsert(({ changed }) =&amp;gt; {        // Log number of inserted records    console.log(changed.length);})onUpdate eventonUpdate is triggered after a record or muliple records are updated and saved to the Document.Callback function will receive a list of updated records.Document.onUpdate(callback)Arguments  callback ( Function: { changed } ): callback function when records are updated          changed ( Array[object] ): a list of records has been updated      Example// Assuming Todos is a Document instanceTodos.onUpdate(({ changed }) =&amp;gt; {        // Log number of updated records    console.log(changed.length);})onRemove eventonRemove is triggered after a record or muliple records are removed from the Document.Callback function will receive a list of removed records.Document.onRemove(callback)Arguments  callback ( Function: { changed } ): callback function when records are removed          changed ( Array[object] ): a list of removed records has been removed      Example// Assuming Todos is a Document instanceTodos.onRemove(({ changed }) =&amp;gt; {        // Log number of removed records    console.log(changed.length);})onChange eventonChange is triggered after any of the above event is triggered from the Document. In other words,it captured all events. Callback function will receive an event name and a list of affected records.Document.onChange(callback)Arguments  callback ( Function: { event, changed } ): callback function when an event is triggered          event ( string ): name of the event that was triggered      changed ( Array[object] ): a list of affected records      Example// Assuming Todos is a Document instanceTodos.onChange(({ changed }) =&amp;gt; {        // Log triggered event and number of records that was affected    console.log(event, &quot;was triggered that affects&quot;, changed.length, &quot;records&quot;);})What’s next?Visit Support and Feedback for contribution, ask for help or give us feedback.If you have gone this far, and have read information provided, we’d like to thank you for your intests in Vasern. We have some examples in case you want some more.P/s: Don’t hesitate to start to build your dream app!",
    "url": "https://v0-3-dev.vasern.com/docs/work-with-collections/event-listeners.html",
    "relUrl": "/docs/work-with-collections/event-listeners.html"
  },
  "8": {
    "id": "8",
    "title": "Examples",
    "content": "",
    "url": "https://v0-3-dev.vasern.com/docs/examples",
    "relUrl": "/docs/examples"
  },
  "9": {
    "id": "9",
    "title": "Frequent Answer Question",
    "content": "",
    "url": "https://v0-3-dev.vasern.com/faq",
    "relUrl": "/faq"
  },
  "10": {
    "id": "10",
    "title": "Getting Started",
    "content": "",
    "url": "https://v0-3-dev.vasern.com/docs/getting-started/getting-started.html",
    "relUrl": "/docs/getting-started/getting-started.html"
  },
  "11": {
    "id": "11",
    "title": "Vasern: an open source database for React Native",
    "content": "Hi there",
    "url": "https://v0-3-dev.vasern.com/",
    "relUrl": "/"
  },
  "12": {
    "id": "12",
    "title": "Installation",
    "content": "  Platforms supported: React Native for Android and iOS (exclude expo projects)The following steps will help you install Vasern into your React Native project.Install VasernMake sure you have created React Native app. Navigate to React Native directory, and be ready to run commands on Terminal (MacOS) or Command Promp (Window).1. Install using NPM:$ npm install --save vasern2. Link Vasern library to your project:Automatic linking - for iOS and Android$ react-native link vasernManual linking - for iOS      From your React Native directory, browse to node_modules/vasern/ios, then drag Vasern.xcodeproj to Libraries directory on your project in XCode.        In the XCode project, navigate to Build Phase &amp;gt; Link Binary with Libraries, click on + icon, find and add libVasern.a.  Manual linking - for Android  Open file android/app/build.gradle from your android main app directory, add vasern dependency:dependencies {+   compile project(':vasern')    implementation fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;])    implementation &quot;com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}&quot;    implementation &quot;com.facebook.react:react-native:+&quot;  // From node_modules}  Open file android/setting.gradleinclude ':app'+ include ':vasern'+ project(':vasern').projectDir = new File(rootProject.projectDir, '../node_modules/vasern/android')  Open android/app/src/main/java/{ bundle id }/MainApplication.java, add VasernManager package.// Add this line after &quot;import android.app.Application;&quot;+ import com.vasern.VasernManager;// Add &quot;new VasernManager()&quot; in &quot;getPackages()&quot; method@Overrideprotected List&amp;lt;ReactPackage&amp;gt; getPackages() {    return Arrays.&amp;lt;ReactPackage&amp;gt;asList(        new MainReactPackage(),+       new VasernManager()    );}3. Close Metro Bundle, rebuild and restart project.What’s next? You have now installed Vasern into your React Native project. Learn more about data modeling or start Writing Schema.",
    "url": "https://v0-3-dev.vasern.com/docs/getting-started/install-vasern.html",
    "relUrl": "/docs/getting-started/install-vasern.html"
  },
  "13": {
    "id": "13",
    "title": "Introduction",
    "content": "    What is Vasern?    Vasern is a NoSQL database for React Native, help developers quickly setup    and work with data easily. Getting started by install Vasern and build your apps in minutes.    Quickstart    Install Vasern    API ReferencesThis documentation will walk you through Vasern installation, data modeling, basic operations, with provided examples.Please let us know if you found a typo, incorrect or unclear information in this document.Note: Vasern beta is now available for experimental, subscribe to Vasern on Github for any update",
    "url": "https://v0-3-dev.vasern.com/docs",
    "relUrl": "/docs"
  },
  "14": {
    "id": "14",
    "title": "Try Vasern online",
    "content": "",
    "url": "https://v0-3-dev.vasern.com/playground.html",
    "relUrl": "/playground.html"
  },
  "15": {
    "id": "15",
    "title": "Filter Records with Query",
    "content": "Queries are used to get and filter records through a Queryable object. Which uses lodash to work with Array records. The following contents are a list of available query methods.Work with QueryableQueryable contains a set of immutable records and separated from the Document records. The following code demonstrates how to create a Queryable object.import { Queryable } from 'vasern';const queryObj = new Queryable(data);Get recordFind and return a record that match with lookupQuery.Queryable.get(lookupQuery)Arguments                              **_lookupQuery ( string          Object )_**                            (string): match record id with string value      (Object): match record properties and values with Object properties and values      Return  Object: object that match with lookupQuery  undefined if not foundExamplevar foundRecord = Queryable.get({ id: &quot;5bc592cacdAsassfs000ddddBBdbcdfb&quot; });Filter recordsFind and return a list of records that match with lookupQuery.Queryable.filter(lookupQuery)Arguments  lookupQuery ( Object ): match record properties and values with Object properties and valuesReturn  Array&amp;lt;Object&amp;gt;: a list of records that match with lookupQueryExamplevar records = Queryable.filter({ completed: true });Exclude recordsExcludes records that match with lookupQuery from current Queryable dataset.Queryable.exclude(lookupQuery)Arguments  lookupQuery ( Object ): match record properties and values with Object properties and valuesReturn  Array&amp;lt;Object&amp;gt;: a list of records that match with lookupQueryExamplevar records = Queryable.exclude({ completed: true });Order recordsRe-order records list by key.Queryable.order(key, asc = true)Arguments  key ( string ): property name  asc (boolean): allow order ascending, set to false for decending order.Return  Array&amp;lt;Object&amp;gt;: a list of reorderd recordsExamplevar records = Queryable.filter({ completed: true });What’s next?Learn about Event listeners",
    "url": "https://v0-3-dev.vasern.com/docs/work-with-collections/queries.html",
    "relUrl": "/docs/work-with-collections/queries.html"
  },
  "16": {
    "id": "16",
    "title": "Quickstart",
    "content": "  Before you start: make sure you have installed VasernSetting up databaseTo work with data, you need to setup a Vasern database instance. A database instance describesthe shape of collections, their keys and validation mode. Read more about database modelThe following example demonstrate how to setup a database with a simple schemaimport Vasern, { types } from 'vasern';const VasernDB = new Vasern({    schemas: [{        name: &quot;Users&quot;,        validation: 'strict',        keys: {            firstName: types.string(55),            lastName: types.string(55)        }    }, {        name: &quot;TodoItems&quot;,        keys: {            name: types.string(55),            status: types.enum('STATUS', 'completed', 'not_completed'),            asignedTo: types.ref(&quot;Users&quot;)        }    }]});Insert dataData can be inserted to collection as object, or Array of object.The example below show how to insert data into Users collection.Note: method .asProxy() will immediately return record with { status: &quot;inserting&quot; }.var peter = VasernDB.collect(&quot;Users&quot;).insert({        firstName: &quot;Peter&quot;,        lastName: &quot;Griffin&quot;    }).asProxy().first();When inserting data with reference field (like assignedTo in this example),the value can be either the reference object or its id;var peterTasks = VasernDB.collect(&quot;TodoItems&quot;)    .insert([        { name: 'Go shopping', status: 'not_completed', assignedTo: peter },        { name: 'Drink at the Clam', status: 'not_completed', assignedTo: peter }    ]).run();Query dataThe following query example will return all TodoItems records that has assignedTo equal Peter.(Reference fields will automatically be fetched and compare using its id)VasernDB.collect(&quot;TodoItems&quot;)    .filter({         assignedTo: { firstName: 'Peter' },        status: 'completed'    })    .asPromise()    .then(result =&amp;gt; console.log(&quot;Items&quot;, result.items) })Or using count to get number of records that match with query filterVasernDB.collect(&quot;TodoItems&quot;)    .count({ status: 'completed' })    .then(result =&amp;gt; console.log(&quot;Total items&quot;, result.total));What’s next? Congrats, you’ve learned the basics of using Vasern. If not already, install Vasern into your existing React Native project.Or learn more about data types supported in Vasern.",
    "url": "https://v0-3-dev.vasern.com/docs/getting-started/quickstart.html",
    "relUrl": "/docs/getting-started/quickstart.html"
  },
  "17": {
    "id": "17",
    "title": "Support and Feedback",
    "content": "For any issues, bugs found, or ask for help and contribution, feel free to file an issue and we will try to help as soon as we can.For discusion and quick chat, join our Slack channel. You can send an email to .If you love us, we’d be super excited if you share Vasern on your twitter, facebook or any social platform with hashtag #vaserndb. Also, follow us on Twitter",
    "url": "https://v0-3-dev.vasern.com/docs/faq/support-and-feedback.html",
    "relUrl": "/docs/faq/support-and-feedback.html"
  },
  "18": {
    "id": "18",
    "title": "Example - Vasern Todo",
    "content": "This example implements a simple todo list app using Vasern as data storage and React Native. It demonstrates basic CRUD operations of Vasern (get, insert, update, delete data).Features  Add, delete todo item  Add, delete sub todo itemDemoInstallation  Clone or download Vasern from Github repository into your computer.      Navigate to examples/vasern-todo and run command from :          Install npm dependencies, (1-3 mins)          $ npm install            Link Vasern using rnpm, or follow instruction on our main “README.md” file          $ rnpm link vasern              Run project.          For iOS, Signing certificate then run the app on your simulator using xCode Project locate at “examples/vasern-todo/ios” or using command react-native run-ios.      For Android, run command react-native run-android.      Other libraries used in this example  react-native-spacer - a keyboard avoding wrapper.Troubleshooting      React Native 0.57 on Android, java.lang.String cannot be cast to com.facebook.... View solution        In some cases, try to clear caches (and on Android, remove android/build and android/.gradle).  ",
    "url": "https://v0-3-dev.vasern.com/docs/examples/todo-example.html",
    "relUrl": "/docs/examples/todo-example.html"
  },
  "19": {
    "id": "19",
    "title": "Collection",
    "content": "This page will explain Vasern, Document to give you a brief understanding.DatabaseVasern data storage itself is a linked Documents. Vasern object manages Documents, ensure their states and consistency. Currently, Vasern provides methods that help to get data across Documents.CollectionUnderneath, each Document is a list of sequential key-value storage engine. It operates separately and links with other Documents by a reference id (like the foreign key).Records{      &quot;Users&quot;: [{        &quot;id&quot;: 2,        &quot;firstName&quot;: &quot;Bryan&quot;,        &quot;lastName&quot;: &quot;Griffin&quot;,        &quot;jobTitle&quot;: [&quot;Writer&quot;,&quot;Composer&quot;]    }]}RelationshipCollection relationships are defined at application level, through database schema.Which means the database and collection don’t know when a record containsa reference to other record.A drawback of collection relationship in Vasern is when deleting a record,if its reference exsited in some other records, the database will not automatically removethe reference idTo define a relationship in collection, use types.ref( refCollectionName ). For example:import { types } from 'vasern';var TodoSchema = {    name: &quot;TodoItems&quot;    keys: {        ...,        assignTo: types.ref(&quot;People&quot;)    }}You can either use the reference object or its id as value of the reference field. For example:VasernDB.collect(&quot;Users&quot;)    .get({ name: &quot;Peter Griffin&quot; })    .asPromise().then(result =&amp;gt; {        let peter = result.first();        VasernDB.collect(&quot;TodoItems&quot;).insert({ ..., assignTo: peter }).run();    })What’s next? Learn about Vasern installation",
    "url": "https://v0-3-dev.vasern.com/docs/database-and-collection/vasern-collection.html",
    "relUrl": "/docs/database-and-collection/vasern-collection.html"
  },
  "20": {
    "id": "20",
    "title": "Work with Collections",
    "content": "",
    "url": "https://v0-3-dev.vasern.com/docs/work-with-collections/work-with-collections.html",
    "relUrl": "/docs/work-with-collections/work-with-collections.html"
  }
}
